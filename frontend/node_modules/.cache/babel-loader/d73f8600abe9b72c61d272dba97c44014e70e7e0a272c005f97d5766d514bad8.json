{"ast":null,"code":"import { UserActionType } from \"../action-types\";\nconst inittialPostList = [];\nconst reducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : inittialPostList;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case UserActionType.SET_USERS:\n      return [...action.payload];\n    case UserActionType.MARK_POST:\n      // console.log(\n      //   state.map((user, index) => {\n\n      //     if (user.id === action.payload.currentUserID) {\n      //       return user.bookmarkList.includes(action.payload.postID)\n      //         ? {\n      //             ...user,\n      //             bookmarkList: user.bookmarkList.filter(\n      //               (bookmarkItem) => bookmarkItem !== action.payload.postID\n      //             ),\n      //           }\n      //         : {\n      //             ...user,\n      //             bookmarkList: [...user.bookmarkList, action.payload.postID],\n      //           };\n      //     } else {\n      //       return user;\n      //     }\n      //   })\n      // );\n\n      return state.map((user, index) => {\n        console.log(index);\n        if (user.id === action.payload.currentUserID) {\n          return user.bookmarkList.includes(action.payload.postID) ? {\n            ...user,\n            bookmarkList: user.bookmarkList.filter(bookmarkItem => bookmarkItem !== action.payload.postID)\n          } : {\n            ...user,\n            bookmarkList: [...user.bookmarkList, action.payload.postID]\n          };\n        } else {\n          return user;\n        }\n      });\n    // case ActionType.STAR_POST:\n    //   return state.map((post, id) => {\n    //     if (id === action.payload) {\n    //       return post.isStared === false\n    //         ? {\n    //             ...post,\n    //             isStared: true,\n    //           }\n    //         : {\n    //             ...post,\n    //             isStared: false,\n    //           };\n    //     } else {\n    //       return post;\n    //     }\n    //   });\n    default:\n      return state;\n  }\n};\nexport default reducer;","map":{"version":3,"names":["UserActionType","inittialPostList","reducer","state","action","type","SET_USERS","payload","MARK_POST","map","user","index","console","log","id","currentUserID","bookmarkList","includes","postID","filter","bookmarkItem"],"sources":["/Users/mac/Documents/My Project/typescript-fpthub/src/redux/reducers/userListReducer.ts"],"sourcesContent":["import { IState as IProps } from \"../../App\";\nimport { UserActionType } from \"../action-types\";\nimport { UserAction } from \"../actions/userAction\";\n\nconst inittialPostList: IProps[\"userList\"] = [];\n\nconst reducer = (state = inittialPostList, action: UserAction) => {\n  switch (action.type) {\n    case UserActionType.SET_USERS:\n      return [...action.payload];\n    case UserActionType.MARK_POST:\n      // console.log(\n      //   state.map((user, index) => {\n          \n      //     if (user.id === action.payload.currentUserID) {\n      //       return user.bookmarkList.includes(action.payload.postID)\n      //         ? {\n      //             ...user,\n      //             bookmarkList: user.bookmarkList.filter(\n      //               (bookmarkItem) => bookmarkItem !== action.payload.postID\n      //             ),\n      //           }\n      //         : {\n      //             ...user,\n      //             bookmarkList: [...user.bookmarkList, action.payload.postID],\n      //           };\n      //     } else {\n      //       return user;\n      //     }\n      //   })\n      // );\n\n      return state.map((user, index) => {\n        console.log(index);\n\n        if (user.id === action.payload.currentUserID) {\n          return user.bookmarkList.includes(action.payload.postID)\n            ? {\n                ...user,\n                bookmarkList: user.bookmarkList.filter(\n                  (bookmarkItem) => bookmarkItem !== action.payload.postID\n                ),\n              }\n            : {\n                ...user,\n                bookmarkList: [...user.bookmarkList, action.payload.postID],\n              };\n        } else {\n          return user;\n        }\n      });\n    // case ActionType.STAR_POST:\n    //   return state.map((post, id) => {\n    //     if (id === action.payload) {\n    //       return post.isStared === false\n    //         ? {\n    //             ...post,\n    //             isStared: true,\n    //           }\n    //         : {\n    //             ...post,\n    //             isStared: false,\n    //           };\n    //     } else {\n    //       return post;\n    //     }\n    //   });\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n"],"mappings":"AACA,SAASA,cAAc,QAAQ,iBAAiB;AAGhD,MAAMC,gBAAoC,GAAG,EAAE;AAE/C,MAAMC,OAAO,GAAG,YAAkD;EAAA,IAAjDC,KAAK,uEAAGF,gBAAgB;EAAA,IAAEG,MAAkB;EAC3D,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAKL,cAAc,CAACM,SAAS;MAC3B,OAAO,CAAC,GAAGF,MAAM,CAACG,OAAO,CAAC;IAC5B,KAAKP,cAAc,CAACQ,SAAS;MAC3B;MACA;;MAEA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;;MAEA,OAAOL,KAAK,CAACM,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,KAAK;QAChCC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;QAElB,IAAID,IAAI,CAACI,EAAE,KAAKV,MAAM,CAACG,OAAO,CAACQ,aAAa,EAAE;UAC5C,OAAOL,IAAI,CAACM,YAAY,CAACC,QAAQ,CAACb,MAAM,CAACG,OAAO,CAACW,MAAM,CAAC,GACpD;YACE,GAAGR,IAAI;YACPM,YAAY,EAAEN,IAAI,CAACM,YAAY,CAACG,MAAM,CACnCC,YAAY,IAAKA,YAAY,KAAKhB,MAAM,CAACG,OAAO,CAACW,MAAM;UAE5D,CAAC,GACD;YACE,GAAGR,IAAI;YACPM,YAAY,EAAE,CAAC,GAAGN,IAAI,CAACM,YAAY,EAAEZ,MAAM,CAACG,OAAO,CAACW,MAAM;UAC5D,CAAC;QACP,CAAC,MAAM;UACL,OAAOR,IAAI;QACb;MACF,CAAC,CAAC;IACJ;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;MACE,OAAOP,KAAK;EAAC;AAEnB,CAAC;AAED,eAAeD,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}